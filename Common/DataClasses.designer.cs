#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SystemGroup.General.CourseEnrollment.Common
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="noidea")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertMajor(Major instance);
    partial void UpdateMajor(Major instance);
    partial void DeleteMajor(Major instance);
    partial void InsertPartyMajor(PartyMajor instance);
    partial void UpdatePartyMajor(PartyMajor instance);
    partial void DeletePartyMajor(PartyMajor instance);
    partial void InsertPrerequisite(Prerequisite instance);
    partial void UpdatePrerequisite(Prerequisite instance);
    partial void DeletePrerequisite(Prerequisite instance);
    partial void InsertSemester(Semester instance);
    partial void UpdateSemester(Semester instance);
    partial void DeleteSemester(Semester instance);
    partial void InsertMajorCourse(MajorCourse instance);
    partial void UpdateMajorCourse(MajorCourse instance);
    partial void DeleteMajorCourse(MajorCourse instance);
    partial void InsertSemesterCoursePlan(SemesterCoursePlan instance);
    partial void UpdateSemesterCoursePlan(SemesterCoursePlan instance);
    partial void DeleteSemesterCoursePlan(SemesterCoursePlan instance);
    partial void InsertSemesterCoursePlanItem(SemesterCoursePlanItem instance);
    partial void UpdateSemesterCoursePlanItem(SemesterCoursePlanItem instance);
    partial void DeleteSemesterCoursePlanItem(SemesterCoursePlanItem instance);
    partial void InsertEnrollmentItem(EnrollmentItem instance);
    partial void UpdateEnrollmentItem(EnrollmentItem instance);
    partial void DeleteEnrollmentItem(EnrollmentItem instance);
    partial void InsertEnrollment(Enrollment instance);
    partial void UpdateEnrollment(Enrollment instance);
    partial void DeleteEnrollment(Enrollment instance);
    #endregion
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Major> Majors
		{
			get
			{
				return this.GetTable<Major>();
			}
		}
		
		public System.Data.Linq.Table<PartyMajor> PartyMajors
		{
			get
			{
				return this.GetTable<PartyMajor>();
			}
		}
		
		public System.Data.Linq.Table<Prerequisite> Prerequisites
		{
			get
			{
				return this.GetTable<Prerequisite>();
			}
		}
		
		public System.Data.Linq.Table<Semester> Semesters
		{
			get
			{
				return this.GetTable<Semester>();
			}
		}
		
		public System.Data.Linq.Table<MajorCourse> MajorCourses
		{
			get
			{
				return this.GetTable<MajorCourse>();
			}
		}
		
		public System.Data.Linq.Table<SemesterCoursePlan> SemesterCoursePlans
		{
			get
			{
				return this.GetTable<SemesterCoursePlan>();
			}
		}
		
		public System.Data.Linq.Table<SemesterCoursePlanItem> SemesterCoursePlanItems
		{
			get
			{
				return this.GetTable<SemesterCoursePlanItem>();
			}
		}
		
		public System.Data.Linq.Table<EnrollmentItem> EnrollmentItems
		{
			get
			{
				return this.GetTable<EnrollmentItem>();
			}
		}
		
		public System.Data.Linq.Table<Enrollment> Enrollments
		{
			get
			{
				return this.GetTable<Enrollment>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private int _Units;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Prerequisite> _Prerequisites;
		
		private EntitySet<Prerequisite> _Prerequisites1;
		
		private EntitySet<MajorCourse> _MajorCourses;
		
		private EntitySet<SemesterCoursePlanItem> _SemesterCoursePlanItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUnitsChanging(int value);
    partial void OnUnitsChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Course()
		{
			this._Prerequisites = new EntitySet<Prerequisite>(new Action<Prerequisite>(this.attach_Prerequisites), new Action<Prerequisite>(this.detach_Prerequisites));
			this._Prerequisites1 = new EntitySet<Prerequisite>(new Action<Prerequisite>(this.attach_Prerequisites1), new Action<Prerequisite>(this.detach_Prerequisites1));
			this._MajorCourses = new EntitySet<MajorCourse>(new Action<MajorCourse>(this.attach_MajorCourses), new Action<MajorCourse>(this.detach_MajorCourses));
			this._SemesterCoursePlanItems = new EntitySet<SemesterCoursePlanItem>(new Action<SemesterCoursePlanItem>(this.attach_SemesterCoursePlanItems), new Action<SemesterCoursePlanItem>(this.detach_SemesterCoursePlanItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="CourseID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Prerequisite", Storage="_Prerequisites", ThisKey="ID", OtherKey="CourseRef")]
		public EntitySet<Prerequisite> Prerequisites
		{
			get
			{
				return this._Prerequisites;
			}
			set
			{
				this._Prerequisites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Prerequisite1", Storage="_Prerequisites1", ThisKey="ID", OtherKey="PrerequisiteCourseRef")]
		public EntitySet<Prerequisite> Prerequisites1
		{
			get
			{
				return this._Prerequisites1;
			}
			set
			{
				this._Prerequisites1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_MajorCourse", Storage="_MajorCourses", ThisKey="ID", OtherKey="CourseRef")]
		public EntitySet<MajorCourse> MajorCourses
		{
			get
			{
				return this._MajorCourses;
			}
			set
			{
				this._MajorCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_SemesterCoursePlanItem", Storage="_SemesterCoursePlanItems", ThisKey="ID", OtherKey="CourseRef")]
		public EntitySet<SemesterCoursePlanItem> SemesterCoursePlanItems
		{
			get
			{
				return this._SemesterCoursePlanItems;
			}
			set
			{
				this._SemesterCoursePlanItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prerequisites(Prerequisite entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Prerequisites(Prerequisite entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_Prerequisites1(Prerequisite entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = this;
		}
		
		private void detach_Prerequisites1(Prerequisite entity)
		{
			this.SendPropertyChanging();
			entity.Course1 = null;
		}
		
		private void attach_MajorCourses(MajorCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_MajorCourses(MajorCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_SemesterCoursePlanItems(SemesterCoursePlanItem entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_SemesterCoursePlanItems(SemesterCoursePlanItem entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Major")]
	public partial class Major : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private System.Data.Linq.Binary _Version;
		
		private int _Units;
		
		private EntitySet<PartyMajor> _PartyMajors;
		
		private EntitySet<MajorCourse> _MajorCourses;
		
		private EntitySet<SemesterCoursePlan> _SemesterCoursePlans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnUnitsChanging(int value);
    partial void OnUnitsChanged();
    #endregion
		
		public Major()
		{
			this._PartyMajors = new EntitySet<PartyMajor>(new Action<PartyMajor>(this.attach_PartyMajors), new Action<PartyMajor>(this.detach_PartyMajors));
			this._MajorCourses = new EntitySet<MajorCourse>(new Action<MajorCourse>(this.attach_MajorCourses), new Action<MajorCourse>(this.detach_MajorCourses));
			this._SemesterCoursePlans = new EntitySet<SemesterCoursePlan>(new Action<SemesterCoursePlan>(this.attach_SemesterCoursePlans), new Action<SemesterCoursePlan>(this.detach_SemesterCoursePlans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MajorID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Units", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Units
		{
			get
			{
				return this._Units;
			}
			set
			{
				if ((this._Units != value))
				{
					this.OnUnitsChanging(value);
					this.SendPropertyChanging();
					this._Units = value;
					this.SendPropertyChanged("Units");
					this.OnUnitsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_PartyMajor", Storage="_PartyMajors", ThisKey="ID", OtherKey="MajorRef")]
		public EntitySet<PartyMajor> PartyMajors
		{
			get
			{
				return this._PartyMajors;
			}
			set
			{
				this._PartyMajors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_MajorCourse", Storage="_MajorCourses", ThisKey="ID", OtherKey="MajorRef")]
		public EntitySet<MajorCourse> MajorCourses
		{
			get
			{
				return this._MajorCourses;
			}
			set
			{
				this._MajorCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_SemesterCoursePlan", Storage="_SemesterCoursePlans", ThisKey="ID", OtherKey="MajorRef")]
		public EntitySet<SemesterCoursePlan> SemesterCoursePlans
		{
			get
			{
				return this._SemesterCoursePlans;
			}
			set
			{
				this._SemesterCoursePlans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PartyMajors(PartyMajor entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_PartyMajors(PartyMajor entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
		
		private void attach_MajorCourses(MajorCourse entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_MajorCourses(MajorCourse entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
		
		private void attach_SemesterCoursePlans(SemesterCoursePlan entity)
		{
			this.SendPropertyChanging();
			entity.Major = this;
		}
		
		private void detach_SemesterCoursePlans(SemesterCoursePlan entity)
		{
			this.SendPropertyChanging();
			entity.Major = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartyMajor")]
	public partial class PartyMajor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MajorRef;
		
		private long _PartyRef;
		
		private System.Nullable<double> _GPA;
		
		private System.Data.Linq.Binary _Version;
		
		private System.Nullable<long> _ProfessorPartyRef;
		
		private EntityRef<Major> _Major;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMajorRefChanging(long value);
    partial void OnMajorRefChanged();
    partial void OnPartyRefChanging(long value);
    partial void OnPartyRefChanged();
    partial void OnGPAChanging(System.Nullable<double> value);
    partial void OnGPAChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnProfessorPartyRefChanging(System.Nullable<long> value);
    partial void OnProfessorPartyRefChanged();
    #endregion
		
		public PartyMajor()
		{
			this._Major = default(EntityRef<Major>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PartyMajorID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long MajorRef
		{
			get
			{
				return this._MajorRef;
			}
			set
			{
				if ((this._MajorRef != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorRefChanging(value);
					this.SendPropertyChanging();
					this._MajorRef = value;
					this.SendPropertyChanged("MajorRef");
					this.OnMajorRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartyRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long PartyRef
		{
			get
			{
				return this._PartyRef;
			}
			set
			{
				if ((this._PartyRef != value))
				{
					this.OnPartyRefChanging(value);
					this.SendPropertyChanging();
					this._PartyRef = value;
					this.SendPropertyChanged("PartyRef");
					this.OnPartyRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPA", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> GPA
		{
			get
			{
				return this._GPA;
			}
			set
			{
				if ((this._GPA != value))
				{
					this.OnGPAChanging(value);
					this.SendPropertyChanging();
					this._GPA = value;
					this.SendPropertyChanged("GPA");
					this.OnGPAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfessorPartyRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<long> ProfessorPartyRef
		{
			get
			{
				return this._ProfessorPartyRef;
			}
			set
			{
				if ((this._ProfessorPartyRef != value))
				{
					this.OnProfessorPartyRefChanging(value);
					this.SendPropertyChanging();
					this._ProfessorPartyRef = value;
					this.SendPropertyChanged("ProfessorPartyRef");
					this.OnProfessorPartyRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_PartyMajor", Storage="_Major", ThisKey="MajorRef", OtherKey="ID", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.PartyMajors.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.PartyMajors.Add(this);
						this._MajorRef = value.ID;
					}
					else
					{
						this._MajorRef = default(long);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prerequisite")]
	public partial class Prerequisite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _CourseRef;
		
		private long _PrerequisiteCourseRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Course> _Course1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnCourseRefChanging(long value);
    partial void OnCourseRefChanged();
    partial void OnPrerequisiteCourseRefChanging(long value);
    partial void OnPrerequisiteCourseRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Prerequisite()
		{
			this._Course = default(EntityRef<Course>);
			this._Course1 = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="PrerequisiteID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long CourseRef
		{
			get
			{
				return this._CourseRef;
			}
			set
			{
				if ((this._CourseRef != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseRefChanging(value);
					this.SendPropertyChanging();
					this._CourseRef = value;
					this.SendPropertyChanged("CourseRef");
					this.OnCourseRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrerequisiteCourseRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long PrerequisiteCourseRef
		{
			get
			{
				return this._PrerequisiteCourseRef;
			}
			set
			{
				if ((this._PrerequisiteCourseRef != value))
				{
					if (this._Course1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrerequisiteCourseRefChanging(value);
					this.SendPropertyChanging();
					this._PrerequisiteCourseRef = value;
					this.SendPropertyChanged("PrerequisiteCourseRef");
					this.OnPrerequisiteCourseRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Prerequisite", Storage="_Course", ThisKey="CourseRef", OtherKey="ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Prerequisites.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Prerequisites.Add(this);
						this._CourseRef = value.ID;
					}
					else
					{
						this._CourseRef = default(long);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Prerequisite1", Storage="_Course1", ThisKey="PrerequisiteCourseRef", OtherKey="ID", IsForeignKey=true)]
		public Course Course1
		{
			get
			{
				return this._Course1.Entity;
			}
			set
			{
				Course previousValue = this._Course1.Entity;
				if (((previousValue != value) 
							|| (this._Course1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course1.Entity = null;
						previousValue.Prerequisites1.Remove(this);
					}
					this._Course1.Entity = value;
					if ((value != null))
					{
						value.Prerequisites1.Add(this);
						this._PrerequisiteCourseRef = value.ID;
					}
					else
					{
						this._PrerequisiteCourseRef = default(long);
					}
					this.SendPropertyChanged("Course1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Semester")]
	public partial class Semester : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _EndDate;
		
		private System.Nullable<System.DateTime> _EnrollmentStartTime;
		
		private System.Nullable<System.DateTime> _EnrollmentEndTime;
		
		private System.Data.Linq.Binary _Version;
		
		private SemesterStatus _State;
		
		private EntitySet<SemesterCoursePlan> _SemesterCoursePlans;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    partial void OnEnrollmentStartTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEnrollmentStartTimeChanged();
    partial void OnEnrollmentEndTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnEnrollmentEndTimeChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnStateChanging(SemesterStatus value);
    partial void OnStateChanged();
    #endregion
		
		public Semester()
		{
			this._SemesterCoursePlans = new EntitySet<SemesterCoursePlan>(new Action<SemesterCoursePlan>(this.attach_SemesterCoursePlans), new Action<SemesterCoursePlan>(this.detach_SemesterCoursePlans));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SemesterID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollmentStartTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EnrollmentStartTime
		{
			get
			{
				return this._EnrollmentStartTime;
			}
			set
			{
				if ((this._EnrollmentStartTime != value))
				{
					this.OnEnrollmentStartTimeChanging(value);
					this.SendPropertyChanging();
					this._EnrollmentStartTime = value;
					this.SendPropertyChanged("EnrollmentStartTime");
					this.OnEnrollmentStartTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollmentEndTime", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> EnrollmentEndTime
		{
			get
			{
				return this._EnrollmentEndTime;
			}
			set
			{
				if ((this._EnrollmentEndTime != value))
				{
					this.OnEnrollmentEndTimeChanging(value);
					this.SendPropertyChanging();
					this._EnrollmentEndTime = value;
					this.SendPropertyChanged("EnrollmentEndTime");
					this.OnEnrollmentEndTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="int NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public SemesterStatus State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_SemesterCoursePlan", Storage="_SemesterCoursePlans", ThisKey="ID", OtherKey="SemesterRef")]
		public EntitySet<SemesterCoursePlan> SemesterCoursePlans
		{
			get
			{
				return this._SemesterCoursePlans;
			}
			set
			{
				this._SemesterCoursePlans.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SemesterCoursePlans(SemesterCoursePlan entity)
		{
			this.SendPropertyChanging();
			entity.Semester = this;
		}
		
		private void detach_SemesterCoursePlans(SemesterCoursePlan entity)
		{
			this.SendPropertyChanging();
			entity.Semester = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MajorCourse")]
	public partial class MajorCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _MajorRef;
		
		private long _CourseRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Major> _Major;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnMajorRefChanging(long value);
    partial void OnMajorRefChanged();
    partial void OnCourseRefChanging(long value);
    partial void OnCourseRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public MajorCourse()
		{
			this._Course = default(EntityRef<Course>);
			this._Major = default(EntityRef<Major>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="MajorCourseID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long MajorRef
		{
			get
			{
				return this._MajorRef;
			}
			set
			{
				if ((this._MajorRef != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorRefChanging(value);
					this.SendPropertyChanging();
					this._MajorRef = value;
					this.SendPropertyChanged("MajorRef");
					this.OnMajorRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long CourseRef
		{
			get
			{
				return this._CourseRef;
			}
			set
			{
				if ((this._CourseRef != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseRefChanging(value);
					this.SendPropertyChanging();
					this._CourseRef = value;
					this.SendPropertyChanged("CourseRef");
					this.OnCourseRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_MajorCourse", Storage="_Course", ThisKey="CourseRef", OtherKey="ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.MajorCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.MajorCourses.Add(this);
						this._CourseRef = value.ID;
					}
					else
					{
						this._CourseRef = default(long);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_MajorCourse", Storage="_Major", ThisKey="MajorRef", OtherKey="ID", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.MajorCourses.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.MajorCourses.Add(this);
						this._MajorRef = value.ID;
					}
					else
					{
						this._MajorRef = default(long);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SemesterCoursePlan")]
	public partial class SemesterCoursePlan : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _SemesterRef;
		
		private long _MajorRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<SemesterCoursePlanItem> _SemesterCoursePlanItems;
		
		private EntitySet<Enrollment> _Enrollments;
		
		private EntityRef<Major> _Major;
		
		private EntityRef<Semester> _Semester;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSemesterRefChanging(long value);
    partial void OnSemesterRefChanged();
    partial void OnMajorRefChanging(long value);
    partial void OnMajorRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public SemesterCoursePlan()
		{
			this._SemesterCoursePlanItems = new EntitySet<SemesterCoursePlanItem>(new Action<SemesterCoursePlanItem>(this.attach_SemesterCoursePlanItems), new Action<SemesterCoursePlanItem>(this.detach_SemesterCoursePlanItems));
			this._Enrollments = new EntitySet<Enrollment>(new Action<Enrollment>(this.attach_Enrollments), new Action<Enrollment>(this.detach_Enrollments));
			this._Major = default(EntityRef<Major>);
			this._Semester = default(EntityRef<Semester>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SemesterCoursePlanID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long SemesterRef
		{
			get
			{
				return this._SemesterRef;
			}
			set
			{
				if ((this._SemesterRef != value))
				{
					if (this._Semester.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemesterRefChanging(value);
					this.SendPropertyChanging();
					this._SemesterRef = value;
					this.SendPropertyChanged("SemesterRef");
					this.OnSemesterRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MajorRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long MajorRef
		{
			get
			{
				return this._MajorRef;
			}
			set
			{
				if ((this._MajorRef != value))
				{
					if (this._Major.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMajorRefChanging(value);
					this.SendPropertyChanging();
					this._MajorRef = value;
					this.SendPropertyChanged("MajorRef");
					this.OnMajorRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SemesterCoursePlan_SemesterCoursePlanItem", Storage="_SemesterCoursePlanItems", ThisKey="ID", OtherKey="SemesterCoursePlanRef")]
		public EntitySet<SemesterCoursePlanItem> SemesterCoursePlanItems
		{
			get
			{
				return this._SemesterCoursePlanItems;
			}
			set
			{
				this._SemesterCoursePlanItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SemesterCoursePlan_Enrollment", Storage="_Enrollments", ThisKey="ID", OtherKey="SemesterCoursePlanRef")]
		public EntitySet<Enrollment> Enrollments
		{
			get
			{
				return this._Enrollments;
			}
			set
			{
				this._Enrollments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Major_SemesterCoursePlan", Storage="_Major", ThisKey="MajorRef", OtherKey="ID", IsForeignKey=true)]
		public Major Major
		{
			get
			{
				return this._Major.Entity;
			}
			set
			{
				Major previousValue = this._Major.Entity;
				if (((previousValue != value) 
							|| (this._Major.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Major.Entity = null;
						previousValue.SemesterCoursePlans.Remove(this);
					}
					this._Major.Entity = value;
					if ((value != null))
					{
						value.SemesterCoursePlans.Add(this);
						this._MajorRef = value.ID;
					}
					else
					{
						this._MajorRef = default(long);
					}
					this.SendPropertyChanged("Major");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_SemesterCoursePlan", Storage="_Semester", ThisKey="SemesterRef", OtherKey="ID", IsForeignKey=true)]
		public Semester Semester
		{
			get
			{
				return this._Semester.Entity;
			}
			set
			{
				Semester previousValue = this._Semester.Entity;
				if (((previousValue != value) 
							|| (this._Semester.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Semester.Entity = null;
						previousValue.SemesterCoursePlans.Remove(this);
					}
					this._Semester.Entity = value;
					if ((value != null))
					{
						value.SemesterCoursePlans.Add(this);
						this._SemesterRef = value.ID;
					}
					else
					{
						this._SemesterRef = default(long);
					}
					this.SendPropertyChanged("Semester");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SemesterCoursePlanItems(SemesterCoursePlanItem entity)
		{
			this.SendPropertyChanging();
			entity.SemesterCoursePlan = this;
		}
		
		private void detach_SemesterCoursePlanItems(SemesterCoursePlanItem entity)
		{
			this.SendPropertyChanging();
			entity.SemesterCoursePlan = null;
		}
		
		private void attach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.SemesterCoursePlan = this;
		}
		
		private void detach_Enrollments(Enrollment entity)
		{
			this.SendPropertyChanging();
			entity.SemesterCoursePlan = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SemesterCoursePlanItem")]
	public partial class SemesterCoursePlanItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _SemesterCoursePlanRef;
		
		private long _PartyRef;
		
		private long _CourseRef;
		
		private int _Capacity;
		
		private int _Taken;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<EnrollmentItem> _EnrollmentItems;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<SemesterCoursePlan> _SemesterCoursePlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSemesterCoursePlanRefChanging(long value);
    partial void OnSemesterCoursePlanRefChanged();
    partial void OnPartyRefChanging(long value);
    partial void OnPartyRefChanged();
    partial void OnCourseRefChanging(long value);
    partial void OnCourseRefChanged();
    partial void OnCapacityChanging(int value);
    partial void OnCapacityChanged();
    partial void OnTakenChanging(int value);
    partial void OnTakenChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public SemesterCoursePlanItem()
		{
			this._EnrollmentItems = new EntitySet<EnrollmentItem>(new Action<EnrollmentItem>(this.attach_EnrollmentItems), new Action<EnrollmentItem>(this.detach_EnrollmentItems));
			this._Course = default(EntityRef<Course>);
			this._SemesterCoursePlan = default(EntityRef<SemesterCoursePlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="SemesterCoursePlanItemID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterCoursePlanRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long SemesterCoursePlanRef
		{
			get
			{
				return this._SemesterCoursePlanRef;
			}
			set
			{
				if ((this._SemesterCoursePlanRef != value))
				{
					if (this._SemesterCoursePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemesterCoursePlanRefChanging(value);
					this.SendPropertyChanging();
					this._SemesterCoursePlanRef = value;
					this.SendPropertyChanged("SemesterCoursePlanRef");
					this.OnSemesterCoursePlanRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartyRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long PartyRef
		{
			get
			{
				return this._PartyRef;
			}
			set
			{
				if ((this._PartyRef != value))
				{
					this.OnPartyRefChanging(value);
					this.SendPropertyChanging();
					this._PartyRef = value;
					this.SendPropertyChanged("PartyRef");
					this.OnPartyRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long CourseRef
		{
			get
			{
				return this._CourseRef;
			}
			set
			{
				if ((this._CourseRef != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseRefChanging(value);
					this.SendPropertyChanging();
					this._CourseRef = value;
					this.SendPropertyChanged("CourseRef");
					this.OnCourseRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Capacity", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Capacity
		{
			get
			{
				return this._Capacity;
			}
			set
			{
				if ((this._Capacity != value))
				{
					this.OnCapacityChanging(value);
					this.SendPropertyChanging();
					this._Capacity = value;
					this.SendPropertyChanged("Capacity");
					this.OnCapacityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taken", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int Taken
		{
			get
			{
				return this._Taken;
			}
			set
			{
				if ((this._Taken != value))
				{
					this.OnTakenChanging(value);
					this.SendPropertyChanging();
					this._Taken = value;
					this.SendPropertyChanged("Taken");
					this.OnTakenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SemesterCoursePlanItem_EnrollmentItem", Storage="_EnrollmentItems", ThisKey="ID", OtherKey="SemesterCoursePlanItemRef")]
		public EntitySet<EnrollmentItem> EnrollmentItems
		{
			get
			{
				return this._EnrollmentItems;
			}
			set
			{
				this._EnrollmentItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_SemesterCoursePlanItem", Storage="_Course", ThisKey="CourseRef", OtherKey="ID", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.SemesterCoursePlanItems.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.SemesterCoursePlanItems.Add(this);
						this._CourseRef = value.ID;
					}
					else
					{
						this._CourseRef = default(long);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SemesterCoursePlan_SemesterCoursePlanItem", Storage="_SemesterCoursePlan", ThisKey="SemesterCoursePlanRef", OtherKey="ID", IsForeignKey=true)]
		public SemesterCoursePlan SemesterCoursePlan
		{
			get
			{
				return this._SemesterCoursePlan.Entity;
			}
			set
			{
				SemesterCoursePlan previousValue = this._SemesterCoursePlan.Entity;
				if (((previousValue != value) 
							|| (this._SemesterCoursePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SemesterCoursePlan.Entity = null;
						previousValue.SemesterCoursePlanItems.Remove(this);
					}
					this._SemesterCoursePlan.Entity = value;
					if ((value != null))
					{
						value.SemesterCoursePlanItems.Add(this);
						this._SemesterCoursePlanRef = value.ID;
					}
					else
					{
						this._SemesterCoursePlanRef = default(long);
					}
					this.SendPropertyChanged("SemesterCoursePlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnrollmentItems(EnrollmentItem entity)
		{
			this.SendPropertyChanging();
			entity.SemesterCoursePlanItem = this;
		}
		
		private void detach_EnrollmentItems(EnrollmentItem entity)
		{
			this.SendPropertyChanging();
			entity.SemesterCoursePlanItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnrollmentItem")]
	public partial class EnrollmentItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _EnrollmentRef;
		
		private long _SemesterCoursePlanItemRef;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<SemesterCoursePlanItem> _SemesterCoursePlanItem;
		
		private EntityRef<Enrollment> _Enrollment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnEnrollmentRefChanging(long value);
    partial void OnEnrollmentRefChanged();
    partial void OnSemesterCoursePlanItemRefChanging(long value);
    partial void OnSemesterCoursePlanItemRefChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public EnrollmentItem()
		{
			this._SemesterCoursePlanItem = default(EntityRef<SemesterCoursePlanItem>);
			this._Enrollment = default(EntityRef<Enrollment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EnrollmentItemID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollmentRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long EnrollmentRef
		{
			get
			{
				return this._EnrollmentRef;
			}
			set
			{
				if ((this._EnrollmentRef != value))
				{
					if (this._Enrollment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrollmentRefChanging(value);
					this.SendPropertyChanging();
					this._EnrollmentRef = value;
					this.SendPropertyChanged("EnrollmentRef");
					this.OnEnrollmentRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterCoursePlanItemRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long SemesterCoursePlanItemRef
		{
			get
			{
				return this._SemesterCoursePlanItemRef;
			}
			set
			{
				if ((this._SemesterCoursePlanItemRef != value))
				{
					if (this._SemesterCoursePlanItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemesterCoursePlanItemRefChanging(value);
					this.SendPropertyChanging();
					this._SemesterCoursePlanItemRef = value;
					this.SendPropertyChanged("SemesterCoursePlanItemRef");
					this.OnSemesterCoursePlanItemRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SemesterCoursePlanItem_EnrollmentItem", Storage="_SemesterCoursePlanItem", ThisKey="SemesterCoursePlanItemRef", OtherKey="ID", IsForeignKey=true)]
		public SemesterCoursePlanItem SemesterCoursePlanItem
		{
			get
			{
				return this._SemesterCoursePlanItem.Entity;
			}
			set
			{
				SemesterCoursePlanItem previousValue = this._SemesterCoursePlanItem.Entity;
				if (((previousValue != value) 
							|| (this._SemesterCoursePlanItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SemesterCoursePlanItem.Entity = null;
						previousValue.EnrollmentItems.Remove(this);
					}
					this._SemesterCoursePlanItem.Entity = value;
					if ((value != null))
					{
						value.EnrollmentItems.Add(this);
						this._SemesterCoursePlanItemRef = value.ID;
					}
					else
					{
						this._SemesterCoursePlanItemRef = default(long);
					}
					this.SendPropertyChanged("SemesterCoursePlanItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enrollment_EnrollmentItem", Storage="_Enrollment", ThisKey="EnrollmentRef", OtherKey="ID", IsForeignKey=true)]
		public Enrollment Enrollment
		{
			get
			{
				return this._Enrollment.Entity;
			}
			set
			{
				Enrollment previousValue = this._Enrollment.Entity;
				if (((previousValue != value) 
							|| (this._Enrollment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enrollment.Entity = null;
						previousValue.EnrollmentItems.Remove(this);
					}
					this._Enrollment.Entity = value;
					if ((value != null))
					{
						value.EnrollmentItems.Add(this);
						this._EnrollmentRef = value.ID;
					}
					else
					{
						this._EnrollmentRef = default(long);
					}
					this.SendPropertyChanged("Enrollment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Enrollment")]
	public partial class Enrollment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _ID;
		
		private long _SemesterCoursePlanRef;
		
		private long _PartyRef;
		
		private System.Nullable<double> _GPA;
		
		private System.Data.Linq.Binary _Version;
		
		private EnrollmentStatus _State;
		
		private long _Creator;
		
		private System.DateTime _CreationDate;
		
		private long _LastModifier;
		
		private System.DateTime _LastModificationDate;
		
		private EntitySet<EnrollmentItem> _EnrollmentItems;
		
		private EntityRef<SemesterCoursePlan> _SemesterCoursePlan;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(long value);
    partial void OnIDChanged();
    partial void OnSemesterCoursePlanRefChanging(long value);
    partial void OnSemesterCoursePlanRefChanged();
    partial void OnPartyRefChanging(long value);
    partial void OnPartyRefChanged();
    partial void OnGPAChanging(System.Nullable<double> value);
    partial void OnGPAChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnStateChanging(EnrollmentStatus value);
    partial void OnStateChanged();
    partial void OnCreatorChanging(long value);
    partial void OnCreatorChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnLastModifierChanging(long value);
    partial void OnLastModifierChanged();
    partial void OnLastModificationDateChanging(System.DateTime value);
    partial void OnLastModificationDateChanged();
    #endregion
		
		public Enrollment()
		{
			this._EnrollmentItems = new EntitySet<EnrollmentItem>(new Action<EnrollmentItem>(this.attach_EnrollmentItems), new Action<EnrollmentItem>(this.detach_EnrollmentItems));
			this._SemesterCoursePlan = default(EntityRef<SemesterCoursePlan>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="EnrollmentID", Storage="_ID", DbType="BigInt NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		public override long ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterCoursePlanRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long SemesterCoursePlanRef
		{
			get
			{
				return this._SemesterCoursePlanRef;
			}
			set
			{
				if ((this._SemesterCoursePlanRef != value))
				{
					if (this._SemesterCoursePlan.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSemesterCoursePlanRefChanging(value);
					this.SendPropertyChanging();
					this._SemesterCoursePlanRef = value;
					this.SendPropertyChanged("SemesterCoursePlanRef");
					this.OnSemesterCoursePlanRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartyRef", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long PartyRef
		{
			get
			{
				return this._PartyRef;
			}
			set
			{
				if ((this._PartyRef != value))
				{
					this.OnPartyRefChanging(value);
					this.SendPropertyChanging();
					this._PartyRef = value;
					this.SendPropertyChanged("PartyRef");
					this.OnPartyRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GPA", DbType="Float", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<double> GPA
		{
			get
			{
				return this._GPA;
			}
			set
			{
				if ((this._GPA != value))
				{
					this.OnGPAChanging(value);
					this.SendPropertyChanging();
					this._GPA = value;
					this.SendPropertyChanged("GPA");
					this.OnGPAChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="Int NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public EnrollmentStatus State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Creator", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long Creator
		{
			get
			{
				return this._Creator;
			}
			set
			{
				if ((this._Creator != value))
				{
					this.OnCreatorChanging(value);
					this.SendPropertyChanging();
					this._Creator = value;
					this.SendPropertyChanged("Creator");
					this.OnCreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreationDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModifier", DbType="BigInt NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public long LastModifier
		{
			get
			{
				return this._LastModifier;
			}
			set
			{
				if ((this._LastModifier != value))
				{
					this.OnLastModifierChanging(value);
					this.SendPropertyChanging();
					this._LastModifier = value;
					this.SendPropertyChanged("LastModifier");
					this.OnLastModifierChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastModificationDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastModificationDate
		{
			get
			{
				return this._LastModificationDate;
			}
			set
			{
				if ((this._LastModificationDate != value))
				{
					this.OnLastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._LastModificationDate = value;
					this.SendPropertyChanged("LastModificationDate");
					this.OnLastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enrollment_EnrollmentItem", Storage="_EnrollmentItems", ThisKey="ID", OtherKey="EnrollmentRef")]
		public EntitySet<EnrollmentItem> EnrollmentItems
		{
			get
			{
				return this._EnrollmentItems;
			}
			set
			{
				this._EnrollmentItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SemesterCoursePlan_Enrollment", Storage="_SemesterCoursePlan", ThisKey="SemesterCoursePlanRef", OtherKey="ID", IsForeignKey=true)]
		public SemesterCoursePlan SemesterCoursePlan
		{
			get
			{
				return this._SemesterCoursePlan.Entity;
			}
			set
			{
				SemesterCoursePlan previousValue = this._SemesterCoursePlan.Entity;
				if (((previousValue != value) 
							|| (this._SemesterCoursePlan.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SemesterCoursePlan.Entity = null;
						previousValue.Enrollments.Remove(this);
					}
					this._SemesterCoursePlan.Entity = value;
					if ((value != null))
					{
						value.Enrollments.Add(this);
						this._SemesterCoursePlanRef = value.ID;
					}
					else
					{
						this._SemesterCoursePlanRef = default(long);
					}
					this.SendPropertyChanged("SemesterCoursePlan");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnrollmentItems(EnrollmentItem entity)
		{
			this.SendPropertyChanging();
			entity.Enrollment = this;
		}
		
		private void detach_EnrollmentItems(EnrollmentItem entity)
		{
			this.SendPropertyChanging();
			entity.Enrollment = null;
		}
	}
}
#pragma warning restore 1591
